<style>
  .navbar .navbar-brand .green-e {
    color: green;
  }

  .product-card {
    margin-bottom: 30px;
  }

  .product-card img {
    max-width: 100%;
    height: auto;
  }

  .product-card .card-body {
    text-align: center;
  }

  .product-card .old-price {
    
    color: red;
  }

  .product-card .new-price {
    color: green;
  }

  .product-card .icons {
    position: absolute;
    top: 10px;
    right: 10px;
    display: flex;
  }

  .product-card .icons a {
    color: white;
    margin-left: 5px;
  }

  .product-card .star-rating {
    color: gold;
  }

  .product-card .add-to-cart {
    margin-top: 10px;
  }

  .sidebar {
    padding: 15px;
    border-right: 1px solid #ddd;
  }

  .sidebar h5 {
    margin-bottom: 15px;
  }

  .sidebar .filters {
    list-style: none;
    padding-left: 0;
  }

  .sidebar .filters li {
    margin-bottom: 10px;
    cursor: pointer;
  }

  .sidebar .subcategories {
    display: none;
    margin-left: 15px;
    list-style: none;
    padding-left: 0;
  }

  .sidebar .subcategories li {
    margin-bottom: 5px;
  }


  .product-img-wrapper {
    position: relative;
    display: inline-block;
    width: 100%;
    max-width: 500px;
  }

  .product-img {
    max-width: 100%;
    height: auto;
    cursor: crosshair;
  }

  .zoomed-img {
    position: absolute;
    top: 0;
    left: 100%;
    width: 300px;
    height: 300px;
    border: 1px solid #ddd;
    background-repeat: no-repeat;
    background-size: 200% 200%;
    display: none;
    z-index: 10;
    pointer-events: none;
  }

  .thumbnail-container {
    display: flex;
    justify-content: space-around;
    margin-top: 10px;
  }

  .thumbnail-img {
    width: 80px;
    height: 80px;
    object-fit: cover;
    cursor: pointer;
    border: 1px solid #ddd;
    padding: 2px;
  }

  .product-card .image-container {
    width: 100%;
    height: 200px;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .product-card .image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }


  .wishlist-icon {
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 24px;
    color: #baa8a8;
    /* Transparent red */
    cursor: pointer;
    transition: color 0.3s ease;
    border-color: #0000;
  }

  .wishlist-icon.active {
    color: red;
    /* Full red when active */
  }
  .pagination-button {
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 8px 12px;
    margin: 0 5px;
    cursor: pointer;
}

.pagination-button:disabled {
    background-color: #ccc;
    cursor: default;
}

.pagination-container {
    display: flex;
    justify-content: flex-end;
    margin-top: 20px;
}
</style>


<div class="container-fluid mt-4">
  <div class="row">
    <!-- Sidebar -->
    <div class="col-md-3 sidebar">
      <h5>Price</h5>
      <div class="row mb-3">
        <div class="col">
          <input type="number" class="form-control" placeholder="Min" id="price-min">
        </div>
        <div class="col">
          <input type="number" class="form-control" placeholder="Max" id="price-max">
        </div>
      </div>
      <div class="filters">
        <h5>Browse by Type</h5>
        <ul class="categories">
          {{#each categories}}
          <li class="category" onclick="toggleSubcategories('{{this._id}}')">
            {{this.categoryName}}
            <ul id="{{this._id}}" class="subcategories" style="display: none;">
              {{#each this.subcategories}}
              <li>
                <input type="checkbox" class="subcategory-checkbox" id="{{this._id}}" value="{{this._id}}">
                <label for="{{this._id}}">{{this.subCategoryName}}</label>
              </li>
              {{/each}}
            </ul>
          </li>
          {{/each}}
        </ul>
        <!-- Other filters such as price range, new arrivals, etc. -->
      </div>

      <h5>Filters</h5>
      <div class="form-check mb-3">
        <input class="form-check-input" type="checkbox" id="new-arrivals" onchange="applyFilters()">
        <label class="form-check-label" for="new-arrivals">
          New Arrivals
        </label>
      </div>
    </div>

    <!-- Main Content -->
    <div class="col-md-9">
      <div class="d-flex justify-content-between mb-3">
        <div>
          <select class="form-control" id="sort-by" onchange="applyFilters()">
            <option value="">Select...</option>
            <option value="popularity">Popularity</option>
            <option value="price-low-high">Price: Low to High</option>
            <option value="price-high-low">Price: High to Low</option>
            <option value="average-ratings">Average Ratings</option>
            <option value="featured">Featured</option>
            <option value="new-arrivals">New Arrivals</option>
            <option value="a-to-z">A - Z</option>
            <option value="z-to-a">Z - A</option>
          </select>
        </div>
        <div>
          <input type="search" class="form-control" placeholder="Search products">
        </div>
      </div>
      <div class="row" id="product-list">
        <!-- Product Card -->
        <!-- Repeat Product Card as needed -->
      </div>
      {{!-- pagination --}}
       <div class="content-container text-end" style="width:95%">
          <div class="pagination-container mt-3 mb-3" id="pagination-container">
            <!-- Pagination buttons will be dynamically added here -->
          </div>
          <div id="data-container"></div>
        </div>

  
    </div>
  </div>
</div>


<script>
  const paginationContainer = document.getElementById('pagination-container');
    const dataContainer = document.getElementById('data-container');
    let currentPage = 1;
    let totalPages = 1;
      
    
  document.addEventListener('DOMContentLoaded', function () {
      const fetchProductsAndPagination = async (page = 1) => {
        const limit = 4;
        try {
          const response = await fetch(`/shopFetch?page=${page}`);
          const data = await response.json();

          renderProducts(data.products);

          renderPagination(data.currentPage, data.totalPages);
        } catch (error) {
          console.error('Error fetching products:', error);
        }
      };

       function renderProducts(products) {
      const productListElement = document.getElementById('product-list');
      productListElement.innerHTML = '';

      products.forEach(product => {
        const productCard = document.createElement('div');
        productCard.className = 'col-md-3 product-card';

        productCard.innerHTML = `
          <div class="card">
            <div class="image-container d-flex justify-content-center align-items-center">
              <img src="${product.thumbnailPaths[0]}" alt="Product Image" class="img-fluid">
            </div>
            <div class="card-body">
              <h5 class="card-title">${product.productName}</h5>
              ${product.status ? `<p id="status">${product.status}</p>` : ''}
              <p class="old-price" style="${product.isOfferExist ?'text-decoration: line-through':''}">₹${product.price}</p>
              <p class="new-price">
        ${product.isOfferExist ?'₹'+product.offerPrice : '<p></p>'} <!-- If offerPrice exists, show it; otherwise, show regular price -->
      </p>
              <div class="star-rating">
                <i class="fas fa-star"></i>
                <i class="fas fa-star"></i>
                <i class="fas fa-star"></i>
                <i class="fas fa-star"></i>
                <i class="fas fa-star-half-alt"></i>
              </div>
            </div>
            <div class="icons">
              <i id="wishlist-icon${product._id}" class="wishlist-icon fas fa-heart ${product.inWishlist ? 'active' : ''}" onclick="toggleWishlist('${product._id}', event)"></i>
            </div>
          </div>
        `;

        // Add click event listener to handle product navigation
        productCard.addEventListener('click', (event) => {
          if (event.target.closest('.card-body') || event.target.closest('.image-container')) {
            window.location.href = `/productDetails/${product._id}`;
          }
        });

        productListElement.appendChild(productCard);
      });
    }

      const renderPagination = (currentPage, totalPages) => {
  const paginationContainer = document.getElementById('pagination-container');
  paginationContainer.innerHTML = '';

  // Previous Button
  const prevButton = document.createElement('button');
  prevButton.className = 'pagination-button';
  prevButton.textContent = 'Previous';
  prevButton.disabled = currentPage === 1;
  prevButton.addEventListener('click', () => fetchProductsAndPagination(currentPage - 1));
  paginationContainer.appendChild(prevButton);

  // Page Number Buttons
  for (let i = 1; i <= totalPages; i++) {
    const button = document.createElement('button');
    button.className = 'pagination-button';
    button.textContent = i;
    if (i === currentPage) {
      button.disabled = true;
    }
    button.addEventListener('click', () => fetchProductsAndPagination(i));
    paginationContainer.appendChild(button);
  }

  // Next Button
  const nextButton = document.createElement('button');
  nextButton.className = 'pagination-button';
  nextButton.textContent = 'Next';
  nextButton.disabled = currentPage === totalPages;
  nextButton.addEventListener('click', () => fetchProductsAndPagination(currentPage + 1));
  paginationContainer.appendChild(nextButton);
};


      fetchProductsAndPagination(currentPage);
    });

  function toggleSubcategories(categoryId) {
    const subcategories = document.getElementById(categoryId);
    if (subcategories) {
      subcategories.style.display = subcategories.style.display === 'none' ? 'block' : 'none';
    }
  }

  const applyFilters = async () => {
    // Get the elements
    const sortByElement = document.getElementById('sort-by');
    const minPriceElement = document.getElementById('price-min');
    const maxPriceElement = document.getElementById('price-max');
    const newArrivalsElement = document.getElementById('new-arrivals');

    // Ensure elements exist before accessing properties
    const sortBy = sortByElement ? sortByElement.value : '';
    const minPrice = minPriceElement ? minPriceElement.value : '';
    const maxPrice = maxPriceElement ? maxPriceElement.value : '';
    const newArrivals = newArrivalsElement ? (newArrivalsElement.checked ? 'true' : '') : '';

    // Get the selected categories and subcategories
    const selectedCategories = Array.from(document.querySelectorAll('.category:checked'))
      .map(cb => cb.value);
    const selectedSubcategories = Array.from(document.querySelectorAll('.subcategory-checkbox:checked'))
      .map(cb => cb.value);

    // Construct query parameters
    const queryParams = new URLSearchParams({
      sortBy,
      minPrice,
      maxPrice,
      category: selectedCategories.join(','),
      subCategory: selectedSubcategories.join(','),
      newArrivals,
      page:currentPage
    });

    // Fetch data from the server
    try {
      const response = await fetch(`/productsSearch?${queryParams.toString()}`);
      if (!response.ok) throw new Error('Network response was not ok');
      const data = await response.json();

      // Update product list and pagination
      updateProductList(data.products);
      updatePagination(data.pagination);
    } catch (error) {
      console.error('Error fetching products:', error);
    }
  };

  document.addEventListener('DOMContentLoaded', function () {
    const sortByElement = document.getElementById('sort-by');
    if (sortByElement) {
      sortByElement.addEventListener('change', applyFilters);
    }

    const minPriceElement = document.getElementById('price-min');
    if (minPriceElement) {
      minPriceElement.addEventListener('change', applyFilters);
    }

    const maxPriceElement = document.getElementById('price-max');
    if (maxPriceElement) {
      maxPriceElement.addEventListener('change', applyFilters);
    }

    const newArrivalsElement = document.getElementById('new-arrivals');
    if (newArrivalsElement) {
      newArrivalsElement.addEventListener('change', applyFilters);
    }

    const categoryCheckboxes = document.querySelectorAll('.category');
    categoryCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', applyFilters);
    });

    const subcategoryCheckboxes = document.querySelectorAll('.subcategory-checkbox');
    subcategoryCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', applyFilters);
    });
  });

  async function fetchProducts(filters) {
    const queryString = new URLSearchParams(filters).toString();
    const response = await fetch(`/productsSearch?${queryString}`);
    const data = await response.json();
    updateProductList(data.products);
  }




  document.querySelectorAll('.filters input[type="checkbox"]').forEach(checkbox => {
    checkbox.addEventListener('change', applyFilters);
  });

  function updateProductList(products) {
    const productList = document.getElementById('product-list');
    productList.innerHTML = ''; // Clear existing products
    products.forEach(product => {
      const productCard = `
      <div class="col-md-3 mb-4">
        <a href="/productDetails/${product._id}" class="text-decoration-none" style="cursor:pointer">
          <div class="card product-card">
            <div class="image-container d-flex justify-content-center align-items-center">
              <img src="${product.thumbnailPaths[0]}" alt="Product Image" class="img-fluid">
            </div>
            <div class="card-body">
              <h5 class="card-title">${product.productName}</h5>
              ${product.status ? `<p id="status">${product.status}</p>` : ''}
              <p class="old-price">₹400 </p>
              <p class="new-price">₹${product.price} </p>
              <div class="star-rating">
                <i class="fas fa-star"></i>
                <i class="fas fa-star"></i>
                <i class="fas fa-star"></i>
                <i class="fas fa-star"></i>
                <i class="fas fa-star-half-alt"></i>
              </div>
            </div>
           
          </div>
        </a>
         <div class="icons">
                  <i id="wishlist-icon${product._id}"  style='margin-right:10px' class="fas fa-heart wishlist-icon  ${product.inWishlist ? `active` : ''}"
          onclick="toggleWishlist('${product._id}')"></i>
            </div>
      </div>
    `;
      productList.insertAdjacentHTML('beforeend', productCard);
    });
  }


  function generateStarRating(rating) {
    // Example function to generate star rating based on the average rating
    const fullStars = Math.floor(rating);
    const halfStars = rating % 1 > 0.5 ? 1 : 0;
    const emptyStars = 5 - fullStars - halfStars;
    return `
    ${'<i class="fas fa-star"></i>'.repeat(fullStars)}
    ${'<i class="fas fa-star-half-alt"></i>'.repeat(halfStars)}
    ${'<i class="far fa-star"></i>'.repeat(emptyStars)}
  `;
  }
  // Fetch initial product list without sorting
  fetchProducts({});

  //wishlist
  async function toggleWishlist(productId,event) {
     event.stopPropagation();
    const wishlistIcon = document.getElementById('wishlist-icon' + productId);
    const isActive = wishlistIcon.classList.contains('active');

    try {
      const response = await fetch(`/addToWishlist`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ productId })
      });

      const data = await response.json();

      if (response.status === 200) {
        if (isActive) {
          wishlistIcon.classList.remove('active');
          wishlistIcon.style.color = '#baa8a8'; // Make icon transparent
        } else {
          wishlistIcon.classList.add('active');
          wishlistIcon.style.color = 'red'; // Make icon fully red
        }
      } else {
        console.error('Error:', data.message);
      }
    } catch (error) {
      console.error('Error:', error);
    }
  }
</script>
</body>

</html>