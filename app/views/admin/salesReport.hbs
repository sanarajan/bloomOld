<style>
    #sidebar {
        width: 230px;
    }

    .section {
        margin-left: 0;
        /* Adjust according to your layout */
    }

    .filter-controls {
        margin-bottom: 20px;
    }

    .filter-controls .btn {
        margin-left: 0px;
    }

    .filter-controls .form-control {
        width: 100px;
        /* Adjust width as needed */
    }

    .summary-cards {
        display: flex;
        flex-wrap: wrap;
        margin-bottom: 20px;
    }

    .summary-card {
        flex: 1;
        min-width: 150px;
        margin: 5px;
        padding: 15px;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 5px;
        text-align: center;
    }

    .summary-card h5 {
        margin-bottom: 10px;
        font-size: 18px;
    }

    .summary-card span {
        font-size: 24px;
        font-weight: bold;
        color: #007bff;
    }
</style>
</head>

<body>
    <!-- Admin Header -->
    <!-- Sidebar -->

    <!-- Main Content -->
    <main id="main" class="main">
        <div class="pagetitle">
            <h1>Sales Report</h1>
        </div>

        <section class="section">
            <!-- Filter Controls -->
            <div class="filter-controls">
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-md-auto">
                            <input type="date" id="startDate" class="form-control">
                        </div>
                        <div class="col-md-auto">
                            <input type="date" id="endDate" class="form-control">
                        </div>
                        <div class="col-md-auto">
                            <button id="applyDateRangeBtn" class="btn btn-secondary">Apply Date Range</button>
                        </div>
                        <div class="col-md-auto">
                            <button id="monthBtn" class="btn btn-primary">Month</button>
                            <button id="yearBtn" class="btn btn-primary">Year</button>
                            <button id="weekBtn" class="btn btn-primary">Week</button>
                        </div>
                        <span id="rangeError" style="color:red"></span>

                    </div>
                </div>
            </div>
            <div class="summary-cards">
                <div class="summary-card">
                    <h5>Total Sales</h5>
                    <span id="totalOrders">0</span>
                </div>
                <div class="summary-card">
                    <h5>Total Customers</h5>
                    <span id="totalCustomers">0</span>
                </div>
                <div class="summary-card">
                    <h5>Online Payments</h5>
                    <span id="onlinePayments">0</span>
                </div>
                <div class="summary-card">
                    <h5>Cash on Delivery</h5>
                    <span id="cashOnDelivery">0</span>
                </div>
                <div class="summary-card">
                    <h5>Total Refunds</h5>
                    <span id="totalRefunds">0</span>
                </div>
                <div class="summary-card">
                    <h5>Total Discount</h5>
                    <span id="totalDiscount">0</span>
                </div>
                <div class="summary-card">
                    <h5>Total Shipping Charges</h5>
                    <span id="totalShipping">0</span>
                </div>
                <div class="summary-card">
                    <h5>Total Order Amount</h5>
                    <span id="totalProfit">0</span>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-body">
                            <table class="table datatable" id="salesReportTable">
                                <thead>
                                    <tr>
                                        <th scope="col">Order ID</th>
                                        <th scope="col">User</th>
                                        <th scope="col">Products</th>
                                        <th scope="col"> MRP</th>

                                        <th scope="col">Tot MRP</th>
                                        <th>Coupn Disc</th>
                                          <th scope="col">Tot Offer</th>
                                        <th scope="col">Tot Disc</th>
                                        <th scope="col">Tot Price</th>
                                        <th scope="col">Status</th>

                                        <th scope="col">Payment Method</th>
                                        <th scope="col">Date</th>

                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Rows will be populated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main><!-- End Main Content -->

    <!-- Include Bootstrap JavaScript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

    <script>
        function fetchSalesReport(filters = {}) {
            if (Object.keys(filters).length === 0) {
                const { startDate, endDate } = getDateRangeForMonth();
                filters = { startDate, endDate };
            }

            let url = '/admin/salesReport';
            const queryParams = new URLSearchParams(filters).toString();
            if (queryParams) {
                url += `?${queryParams}`;
            }

            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.report) {
                        // Update the totals in the view
                        document.getElementById('totalOrders').textContent = data.report.totalSales;
                        document.getElementById('totalCustomers').textContent = data.report.totalCustomers;
                        document.getElementById('onlinePayments').textContent = data.report.onlinePayment;
                        document.getElementById('cashOnDelivery').textContent = data.report.cashOnDelivery;
                        document.getElementById('totalRefunds').textContent = data.report.totalRefund;
                        document.getElementById('totalDiscount').textContent = data.report.totalDiscount;
                        document.getElementById('totalShipping').textContent = data.report.totalShippingCharges;
                        document.getElementById('totalProfit').textContent = data.report.totalOrderedAmount;
                    }

                    const tableBody = document.querySelector('#salesReportTable tbody');
                    tableBody.innerHTML = ''; // Clear existing rows
                    data.orders.forEach(order => {

                        const row = document.createElement('tr');
                        if (order && order.orderedProducts) {
                            const orderedProducts = order.orderedProducts || {};

                            // Check if orderedProducts is an object
                            const product = typeof orderedProducts === 'object' ? orderedProducts : {};

                            const productName = `${product.productName} (x${product.quantity})`;
                            console.log(orderedProducts);

                            row.innerHTML = `
                    <td>${order.orderId}</td>
                    <td>${order.users?.username || 'N/A'}</td>
                    <td>${productName}</td>
                     <td>${product.price}</td>

                      <td>${product.itemTotalPrice || 'N/A'}</td>
                         <td>${product.productDiscount || 'N/A'}</td>
                      
                                          <td>${product.totProdOffer}</td>
                     <td>${product.totProdDisc}</td>

                     
                     <td>${product.offerPrice}</td>
                     <td>${product.orderStatus}</td>                                  


                    <td>${order.paymentMethod || 'N/A'}</td>
                    <td>${new Date(order.createdAt).toLocaleDateString()}</td>
                `;
                            console.log(orderedProducts);
                            tableBody.appendChild(row);
                        }
                    });


                })
                .catch(error => console.error('Error fetching sales report:', error));
        }


        function getDateRangeForMonth() {
            const now = new Date();
            const start = new Date(now.getFullYear(), now.getMonth(), 1);
            const end = new Date(now.getFullYear(), now.getMonth() + 1, 0);
            return { startDate: start.toISOString().split('T')[0], endDate: end.toISOString().split('T')[0] };
        }

        function getDateRangeForWeek() {
            const end = new Date(); // Today
            const start = new Date();
            start.setDate(end.getDate() - 7); // 7 days before today

            return {
                startDate: start.toISOString().split('T')[0],
                endDate: end.toISOString().split('T')[0]
            };
        }

        function getDateRangeForYear() {
            const now = new Date();
            const start = new Date(now.getFullYear(), 0, 1);
            const end = new Date(now.getFullYear(), 11, 31);
            return { startDate: start.toISOString().split('T')[0], endDate: end.toISOString().split('T')[0] };
        }
 function updateDatePickers() {
            const today = new Date().toISOString().split('T')[0];
            const startDatePicker = document.getElementById('startDate');
            const endDatePicker = document.getElementById('endDate');

           startDatePicker.setAttribute('max', today);
        //    endDatePicker.setAttribute('max', today);

            // Set end date min attribute to be the same as start date
            startDatePicker.addEventListener('change', () => {
                const startDate = new Date(startDatePicker.value);
                if (startDate > new Date(endDatePicker.value)) {
                    endDatePicker.value = startDatePicker.value;
                }
                  if (startDate > new Date(today)) {
                 //   alert('Start date cannot be in the future.');
                   // startDatePicker.value = today; // Set start date to today
                }
                endDatePicker.setAttribute('min', startDatePicker.value);
            });

            endDatePicker.addEventListener('change', () => {
                const endDate = new Date(endDatePicker.value);
                if (endDate < new Date(startDatePicker.value)) {
                    endDatePicker.value = startDatePicker.value;
                }
            });
        }
        document.addEventListener('DOMContentLoaded', () => {
            updateDatePickers();

            // Default to current month's report
            const { startDate, endDate } = getDateRangeForMonth();
            fetchSalesReport({ startDate, endDate });

            document.getElementById('applyDateRangeBtn').addEventListener('click', () => {
              const today = new Date().toISOString().split('T')[0];
                 const rangeError = document.getElementById('rangeError');
                document.getElementById('rangeError').textContent = ''
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                if (startDate && endDate) {
                    if (new Date(startDate) > new Date(today)) {
                    rangeError.textContent = 'Start date cannot be in the future.';
                    } else if (endDate > new Date(today)) {
                        rangeError.textContent = 'End date cannot be in the future.';
                    } else if (endDate < startDate) {
                        rangeError.textContent = 'End date must be greater than or equal to the start date.';
                    } else{
                        fetchSalesReport({ startDate, endDate });
                    }
                } else if (!startDate || !endDate) {
                    rangeError.textContent = 'Please select both start and end dates.';
                }
            });

            document.getElementById('monthBtn').addEventListener('click', () => {
                const { startDate, endDate } = getDateRangeForMonth();
                fetchSalesReport({ startDate, endDate });
            });

            document.getElementById('yearBtn').addEventListener('click', () => {
                const { startDate, endDate } = getDateRangeForYear();
                fetchSalesReport({ startDate, endDate });
            });

            document.getElementById('weekBtn').addEventListener('click', () => {
                const { startDate, endDate } = getDateRangeForWeek();
                fetchSalesReport({ startDate, endDate });
            });
        });
          document.getElementById('startDate').addEventListener('change', () => {
            const startDate = document.getElementById('startDate').value;
            if (startDate) {
                document.getElementById('endDate').value = '';
                document.getElementById('endDate').setAttribute('min', startDate);
            }
        });

        // Restrict end date selection based on the start date
        document.getElementById('endDate').addEventListener('change', () => {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            if (startDate && endDate && endDate < startDate) {
                document.getElementById('rangeError').textContent = 'End date must be later than or equal to start date.';
                document.getElementById('endDate').value = '';
            } else {
                document.getElementById('rangeError').textContent = '';
            }
        });
    </script>
</body>

</html>