
  <style>
    .navbar .navbar-brand .green-e { color: green; }
    .product-card { margin-bottom: 30px; }
    .product-card img { max-width: 100%; height: auto; }
    .product-card .card-body { text-align: center; }
    .product-card .old-price { text-decoration: line-through; color: red; }
    .product-card .new-price { color: green; }
    .product-card .icons { position: absolute; top: 10px; right: 10px; display: flex; }
    .product-card .icons a { color: white; margin-left: 5px; }
    .product-card .star-rating { color: gold; }
    .product-card .add-to-cart { margin-top: 10px; }
    .sidebar { padding: 15px; border-right: 1px solid #ddd; }
    .sidebar h5 { margin-bottom: 15px; }
    .sidebar .filters { list-style: none; padding-left: 0; }
    .sidebar .filters li { margin-bottom: 10px; cursor: pointer; }
    .sidebar .subcategories { display: none; margin-left: 15px; list-style: none; padding-left: 0; }
    .sidebar .subcategories li { margin-bottom: 5px; }


     .product-img-wrapper {
      position: relative;
      display: inline-block;
      width: 100%;
      max-width: 500px;
    }

    .product-img {
      max-width: 100%;
      height: auto;
      cursor: crosshair;
    }

    .zoomed-img {
      position: absolute;
      top: 0;
      left: 100%;
      width: 300px;
      height: 300px;
      border: 1px solid #ddd;
      background-repeat: no-repeat;
      background-size: 200% 200%;
      display: none;
      z-index: 10;
      pointer-events: none;
    }

    .thumbnail-container {
      display: flex;
      justify-content: space-around;
      margin-top: 10px;
    }

    .thumbnail-img {
      width: 80px;
      height: 80px;
      object-fit: cover;
      cursor: pointer;
      border: 1px solid #ddd;
      padding: 2px;
    }

    .product-card .image-container {
      width: 100%;
      height: 200px;
      overflow: hidden;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .product-card .image-container img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  </style>


<div class="container-fluid mt-4">
  <div class="row">
    <!-- Sidebar -->
    <div class="col-md-3 sidebar">
      <h5>Price</h5>
      <div class="row mb-3">
        <div class="col">
          <input type="number" class="form-control" placeholder="Min" id="price-min">
        </div>
        <div class="col">
          <input type="number" class="form-control" placeholder="Max" id="price-max">
        </div>
      </div>
   <div class="filters">
  <h5>Browse by Type</h5>
  <ul class="categories">
    {{#each categories}}
      <li class="category" onclick="toggleSubcategories('{{this._id}}')">
        {{this.categoryName}}
        <ul id="{{this._id}}" class="subcategories" style="display: none;">
          {{#each this.subcategories}}
            <li>
              <input type="checkbox" class="subcategory-checkbox" id="{{this._id}}" value="{{this._id}}">
              <label for="{{this._id}}">{{this.subCategoryName}}</label>
            </li>
          {{/each}}
        </ul>
      </li>
    {{/each}}
  </ul>
  <!-- Other filters such as price range, new arrivals, etc. -->
</div>

      <h5>Filters</h5>
      <div class="form-check mb-3">
        <input class="form-check-input" type="checkbox" id="new-arrivals" onchange="applyFilters()">
        <label class="form-check-label" for="new-arrivals">
          New Arrivals
        </label>
      </div>
    </div>

    <!-- Main Content -->
    <div class="col-md-9">
      <div class="d-flex justify-content-between mb-3">
        <div>
         <select class="form-control" id="sort-by" onchange="applyFilters()">
          <option value="">Select...</option>
          <option value="popularity">Popularity</option>
          <option value="price-low-high">Price: Low to High</option>
          <option value="price-high-low">Price: High to Low</option>
          <option value="average-ratings">Average Ratings</option>
          <option value="featured">Featured</option>
          <option value="new-arrivals">New Arrivals</option>
          <option value="a-to-z">A - Z</option>
          <option value="z-to-a">Z - A</option>
        </select>
        </div>
        <div>
          <input type="search" class="form-control" placeholder="Search products">
        </div>
      </div>
      <div class="row" id="product-list">
        <!-- Product Card -->
          {{#each products}}
        <div class="col-md-3">
          <a href="/productDetails/{{this._id}}" class="text-decoration-none" style="cursor:pointer">
            <div class="card product-card">
              <div class="image-container d-flex justify-content-center align-items-center">
                <img src="{{this.thumbnailPaths.[0]}}" alt="Product Image" class="img-fluid">
              </div>
              <div class="card-body">
                <h5 class="card-title">{{this.productName}}</h5>
                {{#if this.status}}
              <p id="status">{{this.status}}</p>
            {{/if}}
                <p class="old-price">400 Rs</p>
                <p class="new-price">{{this.price}} Rs</p>
                <div class="star-rating">
                  <i class="fas fa-star"></i>
                  <i class="fas fa-star"></i>
                  <i class="fas fa-star"></i>
                  <i class="fas fa-star"></i>
                  <i class="fas fa-star-half-alt"></i>
                </div>
              </div>
              <div class="icons">
                <a href="#" class="btn btn-danger"><i class="fa fa-heart"></i></a>
                <a href="#" class="btn btn-warning"><i class="fa fa-shopping-cart"></i></a>
              </div>
            </div>
          </a>
        </div>
      {{/each}}
        <!-- Repeat Product Card as needed -->
      </div>
       <nav aria-label="Page navigation">
          <ul class="pagination">
            {{#if (gt currentPage 1)}}
              <li class="page-item">
                <a class="page-link" href="?page={{subtract currentPage 1}}&limit={{limit}}" aria-label="Previous">
                  <span aria-hidden="true">&laquo;</span>
                </a>
              </li>
            {{/if}}

            {{#each (range 1 totalPages)}}
              <li class="page-item {{#if (eq this ../currentPage)}}active{{/if}}">
                <a class="page-link" href="?page={{this}}&limit={{limit}}">{{this}}</a>
              </li>
            {{/each}}

            {{#if (lt currentPage totalPages)}}
              <li class="page-item">
                <a class="page-link" href="?page={{add currentPage 1}}&limit={{limit}}" aria-label="Next">
                  <span aria-hidden="true">&raquo;</span>
                </a>
              </li>
            {{/if}}
          </ul>
        </nav>
    </div>
  </div>
</div>


<script>
  function toggleSubcategories(categoryId) {
    const subcategories = document.getElementById(categoryId);
    if (subcategories) {
      subcategories.style.display = subcategories.style.display === 'none' ? 'block' : 'none';
    }
  }

  const applyFilters = async () => {
  // Get the elements
  const sortByElement = document.getElementById('sort-by');
  const minPriceElement = document.getElementById('price-min');
  const maxPriceElement = document.getElementById('price-max');
  const newArrivalsElement = document.getElementById('new-arrivals');
  
  // Ensure elements exist before accessing properties
  const sortBy = sortByElement ? sortByElement.value : '';
  const minPrice = minPriceElement ? minPriceElement.value : '';
  const maxPrice = maxPriceElement ? maxPriceElement.value : '';
  const newArrivals = newArrivalsElement ? (newArrivalsElement.checked ? 'true' : '') : '';

  // Get the selected categories and subcategories
  const selectedCategories = Array.from(document.querySelectorAll('.category:checked'))
    .map(cb => cb.value);
  const selectedSubcategories = Array.from(document.querySelectorAll('.subcategory-checkbox:checked'))
    .map(cb => cb.value);

  // Construct query parameters
  const queryParams = new URLSearchParams({
    sortBy,
    minPrice,
    maxPrice,
    category: selectedCategories.join(','),
    subCategory: selectedSubcategories.join(','),
    newArrivals,
  });

  // Fetch data from the server
  try {
    const response = await fetch(`/productsSearch?${queryParams.toString()}`);
    if (!response.ok) throw new Error('Network response was not ok');
    const data = await response.json();

    // Update product list and pagination
    updateProductList(data.products);
    updatePagination(data.pagination);
  } catch (error) {
    console.error('Error fetching products:', error);
  }
};

  document.addEventListener('DOMContentLoaded', function() {
  const sortByElement = document.getElementById('sort-by');
  if (sortByElement) {
    sortByElement.addEventListener('change', applyFilters);
  }

  const minPriceElement = document.getElementById('price-min');
  if (minPriceElement) {
    minPriceElement.addEventListener('change', applyFilters);
  }

  const maxPriceElement = document.getElementById('price-max');
  if (maxPriceElement) {
    maxPriceElement.addEventListener('change', applyFilters);
  }

  const newArrivalsElement = document.getElementById('new-arrivals');
  if (newArrivalsElement) {
    newArrivalsElement.addEventListener('change', applyFilters);
  }

  const categoryCheckboxes = document.querySelectorAll('.category');
  categoryCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', applyFilters);
  });

  const subcategoryCheckboxes = document.querySelectorAll('.subcategory-checkbox');
  subcategoryCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', applyFilters);
  });
});

async function fetchProducts(filters) {
  const queryString = new URLSearchParams(filters).toString();
  const response = await fetch(`/productsSearch?${queryString}`);
  const data = await response.json();
  updateProductList(data.products);
}




document.querySelectorAll('.filters input[type="checkbox"]').forEach(checkbox => {
  checkbox.addEventListener('change', applyFilters);
});

function updateProductList(products) {
  const productList = document.getElementById('product-list');
  productList.innerHTML = ''; // Clear existing products
  products.forEach(product => {
    const productCard = `
      <div class="col-md-3 mb-4">
        <a href="/productDetails/${product._id}" class="text-decoration-none" style="cursor:pointer">
          <div class="card product-card">
            <div class="image-container d-flex justify-content-center align-items-center">
              <img src="${product.thumbnailPaths[0]}" alt="Product Image" class="img-fluid">
            </div>
            <div class="card-body">
              <h5 class="card-title">${product.productName}</h5>
              ${product.status ? `<p id="status">${product.status}</p>` : ''}
              <p class="old-price">400 Rs</p>
              <p class="new-price">${product.price} Rs</p>
              <div class="star-rating">
                <i class="fas fa-star"></i>
                <i class="fas fa-star"></i>
                <i class="fas fa-star"></i>
                <i class="fas fa-star"></i>
                <i class="fas fa-star-half-alt"></i>
              </div>
            </div>
            <div class="icons">
              <a href="#" class="btn btn-danger"><i class="fa fa-heart"></i></a>
              <a href="#" class="btn btn-warning"><i class="fa fa-shopping-cart"></i></a>
            </div>
          </div>
        </a>
      </div>
    `;
    productList.insertAdjacentHTML('beforeend', productCard);
  });
}


function generateStarRating(rating) {
  // Example function to generate star rating based on the average rating
  const fullStars = Math.floor(rating);
  const halfStars = rating % 1 > 0.5 ? 1 : 0;
  const emptyStars = 5 - fullStars - halfStars;
  return `
    ${'<i class="fas fa-star"></i>'.repeat(fullStars)}
    ${'<i class="fas fa-star-half-alt"></i>'.repeat(halfStars)}
    ${'<i class="far fa-star"></i>'.repeat(emptyStars)}
  `;
}

// Fetch initial product list without sorting
fetchProducts({});
</script>
</body>
</html>
